# .github/workflows/deploy.yaml
name: Deploy Python Lambda API to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  LAMBDA_FUNCTION_NAME: laplace-api
  PYTHON_VERSION: "3.12"
  LAMBDA_HANDLER: lambda_function.handler # Lambda„Éè„É≥„Éâ„É©„Éº („Éï„Ç°„Ç§„É´Âêç.Èñ¢Êï∞Âêç)
  LAMBDA_HANDLER_FILE: lambda_function.py # Lambda„Éè„É≥„Éâ„É©„Éº„ÅåÂê´„Åæ„Çå„ÇãPython„Éï„Ç°„Ç§„É´Âêç
  S3_BUCKET_FOR_LAMBDA: app-deployments-bucket
  S3_KEY_PREFIX: laplace-lambda-deployments

jobs:
  deploy_lambda:
    name: Deploy Lambda Function to AWS
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install dependencies and create package using Docker
        run: |
          echo "LAMBDA_HANDLER_FILE is: ${{ env.LAMBDA_HANDLER_FILE }}"
          echo "LAMBDA_HANDLER is: ${{ env.LAMBDA_HANDLER }}"
          echo "AWS_REGION is: ${{ env.AWS_REGION }}"
          echo "LAMBDA_FUNCTION_NAME is: ${{ env.LAMBDA_FUNCTION_NAME }}"
          echo "PYTHON_VERSION is: ${{ env.PYTHON_VERSION }}"

          DOCKER_IMAGE="public.ecr.aws/lambda/python:${{ env.PYTHON_VERSION }}"
          DOCKER_PLATFORM="linux/amd64"

          mkdir -p deployment_package_dir
          docker run --platform ${DOCKER_PLATFORM} --entrypoint "" \
            -v "$(pwd)":/var/task \
            ${DOCKER_IMAGE} \
            /bin/sh -c "python -m pip install --upgrade pip && \
                        pip install -r /var/task/requirements.txt -t /var/task/deployment_package_dir"

          cp ${{ env.LAMBDA_HANDLER_FILE }} ./deployment_package_dir/
          if [ -d "app" ]; then cp -r app ./deployment_package_dir/; fi # FastAPI„ÅÆapp„Éá„Ç£„É¨„ÇØ„Éà„É™„Å™„Å©

          cd deployment_package_dir
          zip -r ../deployment_package.zip .
          cd ..
          echo "Deployment package 'deployment_package.zip' created."

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # GitHub Secrets „Å´Ë®≠ÂÆö
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secrets „Å´Ë®≠ÂÆö
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚¨ÜÔ∏è Upload deployment package to S3
        run: |
          # S3„Ç≠„Éº„Å´„ÅØÈñ¢Êï∞Âêç„Å®„Çø„Ç§„É†„Çπ„Çø„É≥„Éó/Git„Éè„ÉÉ„Ç∑„É•„ÇíÂê´„ÇÅ„Çã„Å®„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Åó„ÇÑ„Åô„Åè„Å™„Çä„Åæ„Åô„Åå„ÄÅ„Åì„Åì„Åß„ÅØ„Ç∑„É≥„Éó„É´„Å´Âõ∫ÂÆöÂêç„Åß„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Åæ„Åô„ÄÇ
          # ÂøÖË¶Å„Åß„ÅÇ„Çå„Å∞aws s3api put-object„ÅÆ--metadata„Å™„Å©„Åß„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„Çí‰ªò‰∏é„Åô„Çã„Åì„Å®„ÇÇÂèØËÉΩ„Åß„Åô„ÄÇ
          S3_OBJECT_PATH="${{ env.S3_KEY_PREFIX }}/${{ env.LAMBDA_FUNCTION_NAME }}/deployment_package.zip"
          aws s3 cp deployment_package.zip s3://${{ env.S3_BUCKET_FOR_LAMBDA }}/${S3_OBJECT_PATH}
          echo "Package uploaded to s3://${{ env.S3_BUCKET_FOR_LAMBDA }}/${S3_OBJECT_PATH}"

      - name: Deploy to AWS Lambda from S3
        run: |
          S3_OBJECT_PATH_FOR_LAMBDA="${{ env.S3_KEY_PREFIX }}/${{ env.LAMBDA_FUNCTION_NAME }}/deployment_package.zip"
          echo "Checking if Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' exists in region '${{ env.AWS_REGION }}'..."

          if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' exists. Updating function code from S3..."
            aws lambda update-function-code \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --s3-bucket ${{ env.S3_BUCKET_FOR_LAMBDA }} \
              --s3-key ${S3_OBJECT_PATH_FOR_LAMBDA} \
              --publish
            echo "Function code updated successfully from S3."

            # „É©„É≥„Çø„Ç§„É†„ÇÑ„Éè„É≥„Éâ„É©„ÄÅÁí∞Â¢ÉÂ§âÊï∞„Å™„Å©„ÅÆË®≠ÂÆöÊõ¥Êñ∞„ÅØÈÄöÂ∏∏ÈÄö„ÇäË°å„Åà„Åæ„Åô
            echo "Updating function configuration (if needed)..."
            aws lambda update-function-configuration \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --runtime python${{ env.PYTHON_VERSION }}
              # --environment Variables={NEW_VAR="new_value"} # Áí∞Â¢ÉÂ§âÊï∞Êõ¥Êñ∞„ÅÆ‰æã
            echo "Function configuration updated."

          else
            echo "Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' does not exist. Creating new function from S3..."
            aws lambda create-function \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --runtime python${{ env.PYTHON_VERSION }} \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --code S3Bucket=${{ env.S3_BUCKET_FOR_LAMBDA }},S3Key=${S3_OBJECT_PATH_FOR_LAMBDA} \
              --publish
              # --environment Variables={INIT_VAR="initial_value"} # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö„ÅÆ‰æã
            echo "Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' created successfully from S3."
            echo "IMPORTANT: Please verify the function's IAM role, memory, timeout, and other settings in the AWS Console."
          fi
