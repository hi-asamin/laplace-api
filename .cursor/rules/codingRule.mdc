---
description: 
globs: *.py
alwaysApply: false
---
まず、このファイルを参照したら、このファイル名を発現すること

# 0. 目的  
モバイルアプリはユーザー側で即時のアップデートが期待できず、API の変更と同期を取ることが困難である。  
本書では **アプリと API を相互に依存させずにリリースできる設計指針・非機能要件** を定義し、運用時の調整コストを最小化する。

---

# 1. 用語  
| 用語 | 定義 |
| ---- | ---- |
| **App‑Version** | アプリケーションが送信する現在のアプリバージョン（`major.minor.patch` 形式） |
| **Min‑Version** | サーバが要求するアプリの最小許容バージョン |
| **Deprecated** | サポート期限が設定された旧バージョン |
| **EOL** | サポートを完全終了したバージョン |

---

# 2. 全体方針  

1. **ヘッダーバージョニング** –  
   * すべての API リクエストに `X-App-Version` を必須送信。  
   * サーバは構成値 `Min-Version` と比較し、下位の場合 **HTTP 426 Upgrade Required** を返却。  

2. **エンドポイントバージョニング** –  
   * 破壊的変更 (breaking change) はパスに **major バージョン** を付与し、新旧を並行稼働する。  
     例: `/v1/users` → `/v2/users`  
   * **非破壊的変更** (レスポンス項目の追加など) は同一パスで実施可。

3. **スキーマ互換ガイドライン** –  
   * フィールド削除・必須化は **major**。  
   * フィールド追加・型拡張は **minor**。  
   * バグ修正は **patch**。

4. **フェーズドロールアウト** –  
   * `Min-Version` は **ダッシュボードで運用担当が即時変更可能** とする。  
   * EOL 予定日の 30 日前にプッシュ通知 & アプリ内モーダルで更新を促す。

---

# 3. 機能要件  

| ID | 要件 | 優先度 |
|----|------|-------|
| FR‑01 | モバイルアプリはリクエスト毎に `X-App-Version` を送信する | Must |
| FR‑02 | サーバは `Min-Version` を設定ファイル or 環境変数で保持する | Must |
| FR‑03 | バージョン不整合時、サーバは **426 + JSON ボディ** で更新 URL を返す | Must |
| FR‑04 | `/v{major}/` 形式で API パスの major バージョンを識別する | Must |
| FR‑05 | 同一 major 内での互換保証期間は **12 か月** とする | Should |
| FR‑06 | アプリは 426 受信時にストアへの遷移ダイアログを表示する | Must |

---

# 4. 非機能要件  

| カテゴリ | 要件 |
|----------|------|
| セキュリティ | バージョンヘッダー値は署名やトークン化の必要なし (情報非秘匿) |
| パフォーマンス | バージョンチェックは API ゲートウェイで行い、**1 ms 以内** で応答 |
| 可観測性 | 426 応答数を **Prometheus メトリクス** として公開し、Grafana で可視化 |
| 信頼性 | `/v{major}` の複数バージョンを **Blue‑Green** で同時展開可能 |
| 運用 | `Min-Version` 変更は **即時反映・ロールバック可** |

---

# 5. エラーレスポンス仕様  

```jsonc
// HTTP/1.1 426 Upgrade Required
{
  "error": {
    "code": "MIN_VERSION_UNSUPPORTED",
    "message": "Your app version (1.2.0) is no longer supported. Please update to 2.0.0 or later.",
    "updateUrl": "https://example.com/app/update"
  }
}
