# .github/workflows/deploy.yaml
name: Deploy Python Lambda API to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  LAMBDA_FUNCTION_NAME: laplace-api
  PYTHON_VERSION: "3.12"
  LAMBDA_HANDLER: lambda_function.handler # Lambdaハンドラー (ファイル名.関数名)
  LAMBDA_HANDLER_FILE: lambda_function.py # Lambdaハンドラーが含まれるPythonファイル名

jobs:
  deploy_lambda:
    name: Deploy Lambda Function to AWS
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies and create package using Docker
        run: |
          echo "LAMBDA_HANDLER_FILE is: ${{ env.LAMBDA_HANDLER_FILE }}"
          echo "LAMBDA_HANDLER is: ${{ env.LAMBDA_HANDLER }}"
          echo "AWS_REGION is: ${{ env.AWS_REGION }}"
          echo "LAMBDA_FUNCTION_NAME is: ${{ env.LAMBDA_FUNCTION_NAME }}"

          # Lambdaのアーキテクチャに合わせてDockerイメージとプラットフォームを指定
          # デフォルトは x86_64 (linux/amd64)
          # Lambdaがarm64の場合は、DOCKER_IMAGEをarm64用に変更し、--platformをlinux/arm64にしてください
          # 例: DOCKER_IMAGE="public.ecr.aws/lambda/python:${{ env.PYTHON_VERSION }}-arm64"
          DOCKER_IMAGE="public.ecr.aws/lambda/python:${{ env.PYTHON_VERSION }}"
          DOCKER_PLATFORM="linux/amd64" # x86_64 Lambdaの場合。arm64の場合は "linux/arm64"

          echo "Creating package directory: deployment_package_dir"
          mkdir -p deployment_package_dir

          echo "Running pip install in Docker container (${DOCKER_IMAGE}, platform: ${DOCKER_PLATFORM}) to build for Lambda environment..."
          # requirements.txtをコンテナにコピーしてインストールするか、マウントして実行します。
          # ここではカレントディレクトリをマウントします。
          docker run --platform ${DOCKER_PLATFORM} -v "$(pwd)":/var/task ${DOCKER_IMAGE} /bin/sh -c \
            "pip install -r /var/task/requirements.txt -t /var/task/deployment_package_dir; exit"

          echo "Copying Lambda handler file ('${{ env.LAMBDA_HANDLER_FILE }}') to package directory..."
          if [ -f "${{ env.LAMBDA_HANDLER_FILE }}" ]; then
            cp ${{ env.LAMBDA_HANDLER_FILE }} ./deployment_package_dir/
          else
            echo "Error: Lambda handler file '${{ env.LAMBDA_HANDLER_FILE }}' not found in repository root."
            exit 1
          fi

          echo "Copying 'app' directory to package directory..."
          if [ -d "app" ]; then                                 
            cp -r app ./deployment_package_dir/                 
          else                                                  
            echo "Warning: 'app' directory not found in repository root. If your FastAPI app is in 'app/', this will cause an ImportError."
          fi 

          echo "Creating ZIP file (deployment_package.zip) from deployment_package_dir..."
          cd deployment_package_dir
          zip -r ../deployment_package.zip .
          cd ..
          echo "Deployment package 'deployment_package.zip' created with dependencies."

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # GitHub Secrets に設定
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secrets に設定
          aws-region: ${{ env.AWS_REGION }}

      - name: 🚀 Deploy to AWS Lambda
        run: |
          echo "Checking if Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' exists in region '${{ env.AWS_REGION }}'..."
          if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' exists. Updating function code..."
            aws lambda update-function-code \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --zip-file fileb://deployment_package.zip \
              --publish
            echo "Function code updated successfully."

            echo "Updating function configuration (runtime and handler)..."
            aws lambda update-function-configuration \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --runtime python${{ env.PYTHON_VERSION }}
            echo "Function configuration updated successfully."
          else
            echo "Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' does not exist. Creating new function..."
            echo "IMPORTANT: Ensure 'LAMBDA_EXECUTION_ROLE_ARN' is correctly set in GitHub Secrets."
            aws lambda create-function \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --runtime python${{ env.PYTHON_VERSION }} \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --zip-file fileb://deployment_package.zip \
              --publish
            echo "Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' created successfully."
            echo "IMPORTANT: Please verify the function's IAM role, memory, timeout, and other settings in the AWS Console."
          fi
